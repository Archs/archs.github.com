<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Archs</title>
    <link>http://archs.github.io/post/</link>
    <description>Recent content in Posts on Archs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jul 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://archs.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lua画图软件</title>
      <link>http://archs.github.io/post/lua.graph/</link>
      <pubDate>Mon, 15 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://archs.github.io/post/lua.graph/</guid>
      <description>&lt;p&gt;在网上看到一篇文章 &lt;a href=&#34;http://www.cnblogs.com/rufi/archive/2011/06/28/GraphPlot.html&#34;&gt;用Lua画二元方程&lt;/a&gt;，很有意思。&lt;/p&gt;

&lt;p&gt;作者提供了源代码，很是佩服Lua的个功能强大和作者的奇思妙想。&lt;/p&gt;

&lt;p&gt;这里仅提供完整的代码封装一份,不依赖外部DLL，成为一个独立的Win32应用程序:
&lt;a href=&#34;http://archs.github.io/assets/media/graph.exe&#34;&gt;下载链接&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setmetatable(_G, { __index = math })
e = exp(1)

cfg=[[
Config={Width=400, Height=400, Xmin=-100, Xmax=100, Ymin=-100, Ymax=100, Split = 4, Expr=&amp;quot;abs(x - y) % 20 &amp;lt; 0.0001&amp;quot;}

function between(x, minValue, maxValue)
  return x &amp;gt;= minValue and x &amp;lt;= maxValue
end

function belongto(x, ranges)
 for _,range in ipairs(ranges) do
      if between(x, range[1], range[2]) then return true end
 end
 return false
end

Favorites={
branchname = &amp;quot;Favorites&amp;quot;,
{leafname = &amp;quot;axis&amp;quot;, tip = &amp;quot;x==0 or y==0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;rect&amp;quot;, tip = &amp;quot;abs(x+50)&amp;lt;10 and abs(y-20)&amp;lt;20&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;lines(V)&amp;quot;, tip = &amp;quot;x%15 == 0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;lines(H)&amp;quot;, tip = &amp;quot;y%15 == 0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;lines(S)&amp;quot;, tip = &amp;quot;(y-x)%20 == 0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;lines(S)&amp;quot;, tip = &amp;quot;(y+x)%20 == 0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;triangular&amp;quot;, tip = &amp;quot;y&amp;lt;x+50 and x*y&amp;lt;0 and y&amp;gt;0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;triangular&amp;quot;, tip = &amp;quot;(x&amp;gt;-20 and x&amp;lt;=0 and y&amp;lt;2*x+40 or x&amp;gt;=0 and x&amp;lt;20 and y&amp;lt;40-2*x) and y&amp;gt;0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;disk&amp;quot;, tip = &amp;quot;x^2 + y^2 &amp;lt; 500&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;circle&amp;quot;, tip = &amp;quot;abs((x^2 + y^2)  - 1000) &amp;lt; 5&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;ellipse&amp;quot;, tip = &amp;quot;abs(((x/2)^2 + y^2)  - 1000) &amp;lt; 5&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;sun&amp;quot;, tip = &amp;quot;(x==0 or abs(atan(y/x)%0.2)&amp;lt;0.005) and between(x^2+y^2, 1600,4900) or x^2+y^2&amp;lt;900&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;face&amp;quot;, tip = &amp;quot;(x/2-25)^2+(y-50)^2&amp;lt;200 or (x/2+25)^2+(y-50)^2&amp;lt;200 or ((x&amp;gt;-20 and x&amp;lt;=0 and y&amp;lt;2*x+40 or x&amp;gt;=0 and x&amp;lt;20 and y&amp;lt;40-2*x) and y&amp;gt;0) or abs((x/2)^2+(y+30)^2-400)&amp;lt;10 or abs(y-(x/8)^2+80)&amp;lt;0.5&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;circles&amp;quot;, tip = &amp;quot;sqrt(x^2 + y^2) % 10 &amp;lt; 0.1&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;wave&amp;quot;, tip = &amp;quot;(x^2 + y^2) % 80 &amp;lt; 5&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;sin&amp;quot;, tip = &amp;quot;abs(y-20*sin(x/5)) &amp;lt; 0.1&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;chessboard&amp;quot;, tip = &amp;quot;sin(y/5)*cos(x/5) &amp;lt; 0.000001&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;cells&amp;quot;, tip = &amp;quot;sin(y/3) + sin(x/3) &amp;lt; 0.000001&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;texture&amp;quot;, tip = &amp;quot;sin((y/3)^2 + x/2) &amp;lt; 0.1&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;texture&amp;quot;, tip = &amp;quot;sin(y^2)+cos(x^2) &amp;lt; 0.000001&amp;quot;, config = {Xmin=-8, Xmax=8, Ymin=-8,Ymax=8,Split=5}},
{leafname = &amp;quot;spots&amp;quot;, tip = &amp;quot;sin(x)^2+cos(y)^2 &amp;lt; 0.5&amp;quot;, config = {Xmin=-8, Xmax=8, Ymin=-8,Ymax=8,Split=5}},
{leafname = &amp;quot;Margarita&amp;quot;, tip = &amp;quot;mod(sqrt(x^2+y^2)-3.5*atan(x,y)+sin(x)+cos(y),pi)&amp;lt;pi/2&amp;quot;, config = {Xmin=-20, Xmax=20, Ymin=-20,Ymax=20,Split=8}},
{leafname = &amp;quot;pattern&amp;quot;, tip = &amp;quot;sin(x*sin(y)+y*sin(x)) &amp;lt; 0.001&amp;quot;, config = {Xmin=-12, Xmax=12, Ymin=-12,Ymax=12,Split=8}},
{leafname = &amp;quot;untitled&amp;quot;, tip = &amp;quot;abs(e^(sin(x)+cos(y))-sin(e^(x+y)))&amp;lt;0.01&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=15}},
{leafname = &amp;quot;untitled&amp;quot;, tip = &amp;quot;abs( sin(sin(x)+cos(y)) - cos(sin(x*y)+cos(x)) )&amp;lt;0.01&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=10}},
{leafname = &amp;quot;untitled&amp;quot;, tip = &amp;quot;abs( sin(x^2+y^2) - cos(x*y) )&amp;lt;0.01&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=10}},
{leafname = &amp;quot;mesh&amp;quot;, tip = &amp;quot;abs( sin(x^2-y^2) - cos(x*y) )&amp;lt;0.01&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=10}},
{leafname = &amp;quot;untitled&amp;quot;, tip = &amp;quot;abs( sin(x^sin(y)+y^cos(x))-cos(y^x+x^y))&amp;lt;0.005&amp;quot;, config = {Xmin=0, Xmax=20, Ymin=0,Ymax=20,Split=10}},
{leafname = &amp;quot;Frontispiece&amp;quot;, tip = &amp;quot;abs( x/sin(x)+y/sin(y) - x*y/sin(x*y) )&amp;lt;1&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=10}},
{leafname = &amp;quot;Threesome&amp;quot;, tip = &amp;quot;belongto(sin(sqrt((x+5)^2+y^2))*cos(8*atan(y/(x+5)))*sin(sqrt((x-5)^2+(y-5)^2))*cos(8*atan((y-5)/(x-5)))*sin(sqrt(x^2+(y+5)^2))*cos(8*atan((y+5)/x)), {{-0.1,0},{0.2,math.huge}})&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=10}},
{leafname = &amp;quot;TaiChi&amp;quot;, tip = &amp;quot;x^2+y^2&amp;lt;64 and x^2+(y-4)^2&amp;gt;16 and x^2+(y+4)^2&amp;gt;1 and x&amp;lt;=0 or between(x^2+(y+4)^2,1,16) or x^2+(y-4)^2&amp;lt;1 or abs(sqrt(x^2+y^2)-8)&amp;lt;0.005&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=10}},
}
]]

-- Load Config and Favorites
-- dofile(&amp;quot;Favorites.lua&amp;quot;)
-- make sure to load the &amp;quot;config files&amp;quot;
require(&amp;quot;io&amp;quot;)
ferr = io.open(&amp;quot;Favorites.lua&amp;quot;)
if not ferr then
  assert(loadstring(cfg))()
else
  dofile(&amp;quot;Favorites.lua&amp;quot;)
  io.close(ferr)
end
pixels = {}
for r=1,Config.Height do
 pixels[r] = {}
 for c=1,Config.Width do
       pixels[r][c] = false
 end
end

cnv = iup.canvas{ rastersize=string.format(&amp;quot;%dx%d&amp;quot;, Config.Width, Config.Height) }
treeFavorite = iup.tree{ size = &amp;quot;100x100&amp;quot;}

canvasColor = cd.EncodeColor(255,255,255)
penColor = cd.EncodeColor(0,0,0)

function selectColor(self)
 r,g,b = iup.GetColor(iup.CENTER,iup.CENTER)
self.bgcolor = string.format(&amp;quot;%d %d %d&amp;quot;,r,g,b)
if self.name == &amp;quot;btnPen&amp;quot; then penColor = cd.EncodeColor(r,g,b)
else canvasColor = cd.EncodeColor(r,g,b) end
end

dlg = iup.dialog
{
   title=&amp;quot;Plot graphs of equations and inequalities in two vairables&amp;quot;,
   resize=&amp;quot;NO&amp;quot;,
   minbox=&amp;quot;NO&amp;quot;,
   iup.hbox
   {
       iup.vbox
       {
          iup.frame
          {
              title = &amp;quot;Color&amp;quot;,
              iup.hbox
              {
                   iup.label{title = &amp;quot; Canvas: &amp;quot;},
                   iup.button{ name = &amp;quot;btnCanvas&amp;quot;, size = &amp;quot;22x10&amp;quot;, bgcolor=&amp;quot;255 255 255&amp;quot;, flat=&amp;quot;YES&amp;quot;, action = selectColor},
                   iup.label{title = &amp;quot; Pen: &amp;quot;},
                   iup.button{ name = &amp;quot;btnPen&amp;quot;, size = &amp;quot;22x10&amp;quot;, bgcolor=&amp;quot;0 0 0&amp;quot;, flat=&amp;quot;YES&amp;quot;, action = selectColor},
                   alignment = &amp;quot;ACENTER&amp;quot;
              }
          },
          iup.frame
          {
              title = &amp;quot;Range&amp;quot;,
              iup.vbox
              {
                   iup.hbox
                   {
                       iup.label{title = &amp;quot;X: &amp;quot;},
                       iup.text{ name = &amp;quot;txtXMin&amp;quot;, size = &amp;quot;38x10&amp;quot;, value = Config.Xmin},
                       iup.label{title = &amp;quot; ~ &amp;quot;},
                       iup.text{ name = &amp;quot;txtXMax&amp;quot;, size = &amp;quot;38x10&amp;quot;, value = Config.Xmax}
                   },
                   iup.hbox
                   {
                       iup.label{title = &amp;quot;Y: &amp;quot;},
                       iup.text{ name = &amp;quot;txtYMin&amp;quot;, size = &amp;quot;38x10&amp;quot;, value = Config.Ymin},
                       iup.label{title = &amp;quot; ~ &amp;quot;},
                       iup.text{ name = &amp;quot;txtYMax&amp;quot;, size = &amp;quot;38x10&amp;quot;, value = Config.Ymax}
                   }
              }
          },
          iup.hbox
          {
               iup.label{ title = &amp;quot;Pixel Split: &amp;quot; },
               iup.text{ name = &amp;quot;txtSplit&amp;quot;, value = Config.Split},
               alignment = &amp;quot;ACENTER&amp;quot;
          },
          treeFavorite,
          margin = &amp;quot;2x2&amp;quot;
       },
       iup.vbox
       {
           iup.hbox
           {
               iup.label{title = &amp;quot;Expression: &amp;quot;},
               iup.text{ name = &amp;quot;exprtext&amp;quot;, rastersize = (Config.Width-120)..&amp;quot;x22&amp;quot;, value = &amp;quot;abs(x - y) % 20 &amp;lt; 0.0001&amp;quot;},
               iup.button{title = &amp;quot;Plot&amp;quot;, size = &amp;quot;34x12&amp;quot;, action = function() plotExpression() end},
               alignment = &amp;quot;ACENTER&amp;quot;
           },
           cnv,
           margin = &amp;quot;2x2&amp;quot;
       }
   }
}

function getNumber(name)
   return tonumber(iup.GetDialogChild(dlg, name).value)
end

function setTextValue(name, value)
   iup.GetDialogChild(dlg, name).value = value
end

function plotExpression()
   local expr = iup.GetDialogChild(dlg, &amp;quot;exprtext&amp;quot;).value
   local func, err = loadstring(&amp;quot;return function (x,y) return &amp;quot;.. expr..&amp;quot; end&amp;quot;)
   if func==nil then iup.Message(&amp;quot;Error&amp;quot;, &amp;quot;Expression has syntax errors:\r\n&amp;quot;..err) return end
   equation = func()
   drawing = true
   iup.Redraw(cnv, 0)
end

function cnv:map_cb()
 canvas = cd.CreateCanvas(cd.IUP, self)
end

drawing = false
function cnv:action()
 canvas:Activate()
 canvas:Background(canvasColor)
 canvas:Clear()
 local width = Config.Width
 local height = Config.Height
 if drawing == false then
   for r=height,1,-1 do
     for c=1,width do
         if pixels[r][c] then
           canvas:Pixel(c, r, penColor)
         end
     end
   end
   return
 end

 dlg.active = &amp;quot;NO&amp;quot;
 local xMin = getNumber(&amp;quot;txtXMin&amp;quot;)
 local xMax = getNumber(&amp;quot;txtXMax&amp;quot;)
 local yMin = getNumber(&amp;quot;txtYMin&amp;quot;)
 local yMax = getNumber(&amp;quot;txtYMax&amp;quot;)
 local split = getNumber(&amp;quot;txtSplit&amp;quot;)
 local DX = (xMax - xMin)/width
 local DY = (yMax - yMin)/height
 local dx = DX / split
 local dy = DY / split
 local x = xMin
 local y = yMax
 for r=height,1,-1 do
     for c=1,width do
       local fill = isSolution(x,y,dx,dy,split)
       pixels[r][c] = fill
       if fill then
           canvas:Pixel(c, r, penColor)
       end
       x = x + DX
     end
     x = xMin
     y = y - DY
 end
 drawing = false
 dlg.active = &amp;quot;YES&amp;quot;
end

function isSolution(x0,y0,dx,dy,split)
   local x = x0
   local y = y0
   for i=1,split do
       for j=1,split do
           if equation(x, y) then return true end
           x = x + dx
       end
       x = x0
       y = y - dy
   end
   return false
end

function treeFavorite:selection_cb(id, status)
   if status == 1 then
       node = Favorites[id]
       setTextValue(&amp;quot;exprtext&amp;quot;, node.tip)
       if node.config ~= nil then
           setTextValue(&amp;quot;txtXMin&amp;quot;, node.config.Xmin)
           setTextValue(&amp;quot;txtXMax&amp;quot;, node.config.Xmax)
           setTextValue(&amp;quot;txtYMin&amp;quot;, node.config.Ymin)
           setTextValue(&amp;quot;txtYMax&amp;quot;, node.config.Ymax)
           setTextValue(&amp;quot;txtSplit&amp;quot;, node.config.Split)
       end
   end
end

function dlg:close_cb()
 canvas:Kill()
 self:destroy()
 return iup.IGNORE
end

dlg:show()
iup.TreeAddNodes(treeFavorite, Favorites)
iup.MainLoop()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GIT的奇技淫巧--修改历史</title>
      <link>http://archs.github.io/post/git-amend/</link>
      <pubDate>Sat, 13 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://archs.github.io/post/git-amend/</guid>
      <description>&lt;p&gt;使用版本控制系统这么久，被GIT震惊了， 简直是无所不能啊，下面就是
一个修改历史版本中所有用户信息的命令，叹为观止。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git filter-branch --commit-filter &#39;
       if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;previous@email.address&amp;quot; ];
       then
               GIT_AUTHOR_NAME=&amp;quot;NowName&amp;quot;;
               GIT_AUTHOR_EMAIL=&amp;quot;now@email.address&amp;quot;;
               git commit-tree &amp;quot;$@&amp;quot;;
       else
               git commit-tree &amp;quot;$@&amp;quot;;
       fi&#39; HEAD
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>使用Mingw Build Lua 的注意事项</title>
      <link>http://archs.github.io/post/mingw.build.lua/</link>
      <pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://archs.github.io/post/mingw.build.lua/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Lua的扩展库使用LUA_LIB宏定义&lt;/p&gt;

&lt;p&gt;在c文件中引入lua的头文件之前加入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define LUA_LIB
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用windows库的时候，需要在gcc命令行中引入库的顺序&lt;/p&gt;

&lt;p&gt;这样&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -lwsock32 ws_c_file.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可能会造成winsock函数未定义应用的问题，最好使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc ws_c_file.c -lwsock32 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个问题相当诡异，简直不知道怎么说是好。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>DSL的模式和方法</title>
      <link>http://archs.github.io/post/dsl/</link>
      <pubDate>Wed, 29 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://archs.github.io/post/dsl/</guid>
      <description>

&lt;p&gt;最近研究Lisp，对Domain Specific Language很是产生了一些兴趣。&lt;/p&gt;

&lt;p&gt;James Gosling曾经说过： &lt;code&gt;每个配置文件最终都会变成一门编程语言。&lt;/code&gt; 这大概是
DSL之所以兴起和引人关注的一点吧。另外Martin Fowler在&lt;a href=&#34;http://book.douban.com/subject/21964984/&#34;&gt;《领域特定语言》&lt;/a&gt;中
强调了与领域专家的沟通作为DSL的一个主要优点和设计出发点。&lt;/p&gt;

&lt;p&gt;广义的说HTML之于服务后端的业务逻辑实现和。net中XAML对于C#的代码来说都是
一种具体的DSL，所以说DSL促成了或者达到了UI和业务分离也不为过，这实际上
可以认为是领域专家（UI设计师）沟通的延伸，但是达成的效果是实实在在的。
上面举到的两个例子跟XML的关系是非同一般的紧密，同时也说了XML作为DSL载体
的优势。&lt;/p&gt;

&lt;h1 id=&#34;内部和外部dsl:b91f061e580551b58ef10f70a914bd76&#34;&gt;内部和外部DSL&lt;/h1&gt;

&lt;p&gt;大体上讲DSL可以分为两种。Martin Fowler说的第三种语言工作台我不是很理解。
内部DSL与宿主语言结合紧密，实际上可以认为是宿主语言的特殊形式，这一点可
能与XML的例子大相径庭，也是我刚接触LISP的时候最困惑的一点：宿主语言自身
也可以有DSL吗？&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://book.douban.com/subject/21964984/&#34;&gt;《领域特定语言》&lt;/a&gt;中定义DSL为：&lt;code&gt;针对某一特定领域，具有受限表达性的一种
计算机程序设计语言&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;这里如果硬性认定 &lt;strong&gt;计算机程序设计语言&lt;/strong&gt; 的话，那么好多DSL就不能被考虑在内
了。实际上DSL的定义可以相当 &lt;strong&gt;广泛&lt;/strong&gt; ：具有一定模式的特殊语法形式都可以
认为DSL的一种，比如Lisper经常会自行定义的特殊语法结构，有的时候只是为了完成
一部分的功能；再比如Make和Ant都被认为是DSL的典型范例，但是它们作为计算机设
计语言都是不完备的，不仅不能算作完备，甚至连完整也称不上。&lt;/p&gt;

&lt;p&gt;外部DSL就比较常规了，感觉我们通常说的DSL就是这一种了。&lt;/p&gt;

&lt;h1 id=&#34;内部dsl的几种方式:b91f061e580551b58ef10f70a914bd76&#34;&gt;内部DSL的几种方式&lt;/h1&gt;

&lt;p&gt;看&lt;a href=&#34;http://book.douban.com/subject/21964984/&#34;&gt;《领域特定语言》&lt;/a&gt;比较有收获的一点是关于内部DSL的认识，让我长了不少见识。
内部DSL可以根据宿主语言的语法特点有针对的构造，方法（不仅仅是函数）、闭包和
Literal Map都是大有帮助的语法糖，所以在面向对象和动态类型的语言里面实现起来
都是比较便利的，当然Go也其中哦。&lt;/p&gt;

&lt;p&gt;经典的几种方式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;表达式生产器&lt;/p&gt;

&lt;p&gt;这种方式说是实在的与方法级联的形式差不多，主要在于对原有的命令式接口函数
的组装。这里说的表达式，就是原来的命令是的接口所谓表达式，应该就是程序
设计语言中原有的关于表达式的概念。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法级联&lt;/p&gt;

&lt;p&gt;这是常见的方式，广为人知的形式应该就是 &lt;strong&gt;jQuery的链式操作&lt;/strong&gt; 了，很经典。不过，
如果这都算是一种DSL的话，那么DSL的范围应该是十分广泛的。一个方法级联的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;computer()
    .processor()
        .cores(2)
        .speed(2500)
        .i386()
    .disk()
        .size(150)
    .dist()
        .size(75)
        .speed(7200)
        .sata()
    .end()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面这种还好，不过 &lt;strong&gt;jQuery的链式操作&lt;/strong&gt; 中噪杂的信息太多了，
实际上应该还是专注于宿主语言的使用了。这种形式的API好像是越来越多了，
&lt;a href=&#34;https://code.google.com/p/google-api-go-client/&#34;&gt;Google API的Go Client&lt;/a&gt;也多少采用了类似的形式。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Literal Map&lt;/p&gt;

&lt;p&gt;这种方式就要借助于宿主语言的实现方式了，支持Literal Map在脚本语言里很常见，
最近主流的静态类型语言也开始支持了，比如C#和Go。 在Go语言中这是一个很好的
特性，下面这段代码引自 &lt;em&gt;Go语言的Windows GUI项目&lt;a href=&#34;https://github.com/lxn/walk/blob/master/examples/actions/actions.go&#34;&gt;Walk&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MainWindow{
AssignTo: &amp;amp;mw。MainWindow，
Title:    &amp;quot;Walk Actions Example&amp;quot;，
MenuItems: []MenuItem{
    Menu{
        Text: &amp;quot;&amp;amp;File&amp;quot;,
        Items: []MenuItem{
            Action{
                AssignTo:    &amp;amp;openAction,
                Text:        &amp;quot;&amp;amp;Open&amp;quot;,
                Image:       &amp;quot;。。/img/open。png&amp;quot;,
                Enabled:     Bind(&amp;quot;enabledCB。Checked&amp;quot;),
                Visible:     Bind(&amp;quot;openVisibleCB。Checked&amp;quot;),
                Shortcut:    Shortcut{walk。ModControl, walk。KeyO},
                OnTriggered: mw。openAction_Triggered,
            },
            Menu{
                AssignTo: &amp;amp;recentMenu,
                Text:     &amp;quot;Recent&amp;quot;,
            },
            Separator{},
            Action{
                Text:        &amp;quot;E&amp;amp;xit&amp;quot;,
                OnTriggered: func() { walk。App()。Exit(0) },
            },
        },
    },
    Menu{
        Text: &amp;quot;&amp;amp;Help&amp;quot;,
        Items: []MenuItem{
            Action{
                AssignTo:    &amp;amp;showAboutBoxAction,
                Text:        &amp;quot;About&amp;quot;,
                OnTriggered: mw。showAboutBoxAction_Triggered,
            },
        },
    },
},
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码用&lt;a href=&#34;https://github.com/lxn/walk/blob/master/examples/actions/actions.go&#34;&gt;Walk&lt;/a&gt;的说法是 &lt;em&gt;Declarative(声明式)&lt;/em&gt; 的，但是正好使用了
DSL中Literal Map的形式，其本身也是Go中的Literal Map。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外还有 &lt;em&gt;嵌套函数&lt;/em&gt; ， &lt;em&gt;函数序另列&lt;/em&gt; 等形式，前者还好，在函数式编程中颇为常见，
后者就有点难受了，实现起来要严重的依赖全局变量，想来不是什么好方法吧:)&lt;/p&gt;

&lt;h1 id=&#34;程序中的几种语义模型:b91f061e580551b58ef10f70a914bd76&#34;&gt;程序中的几种语义模型&lt;/h1&gt;

&lt;p&gt;DSL主要用来是我们的程序更加的 &lt;em&gt;灵活&lt;/em&gt; ， 那么这种灵活的关键是程序中关于语法
和语义的分离。 在使用DSL的程序中建立语义模型就很关键。 下面罗列几种常见的程序
语义模型:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;决策表&lt;/li&gt;
&lt;li&gt;依赖网络&lt;/li&gt;
&lt;li&gt;产生式规则&lt;/li&gt;
&lt;li&gt;状态机&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;决策表实际上和状态机有点相似，但是实现起来略为简单一些。 依赖网络用来管理
大量数据的共生关系，可以想象一下Make中的目标和依赖，一般可以用有向无环图来
实现。 产生式规则，看起来简单，却是一个水很深的领域，早期的人工智能和应用着重
研究专家系统，而产生式系统是专家系统的基石。不过往简单的方面来考虑，使用决策树
来做产生式规则还是很直观的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在TinyCore中取代BusyBox</title>
      <link>http://archs.github.io/post/fullpowerTinyCore/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://archs.github.io/post/fullpowerTinyCore/</guid>
      <description>&lt;p&gt;TinyCore为了最小化体积，使用BusyBox构建基本的Shell环境，所以不是
完全的 &lt;code&gt;GNU compatible&lt;/code&gt; ，在编译软件的时候可能造成一定的困扰。如果
在TinyCore下面编译软件遇到问题，可注意下兼容性问题。&lt;/p&gt;

&lt;p&gt;使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tce-load -wo coreutils util-linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以OnDemand的方式安装 &lt;code&gt;coreutils&lt;/code&gt; 和 &lt;code&gt;util-linux&lt;/code&gt; ，下载必须软件包。
使用的时候&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tce-load -i coreutils util-linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可。参见&lt;a href=&#34;http://tinycorelinux.net/faq.html#compatibility&#34;&gt;TinyCore Wiki&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用hg访问git仓库</title>
      <link>http://archs.github.io/post/hg4git/</link>
      <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://archs.github.io/post/hg4git/</guid>
      <description>

&lt;p&gt;hg用久了，觉得git命令很别扭，高级功能很少用到，速度差别基本上
感觉不出来，哈，所以还是hg喽. 唯一的问题就在于Github，它不支持hg。
好在hg有一个hggit的扩展，有一次感叹一下python的“batter included”！&lt;/p&gt;

&lt;h2 id=&#34;安装前准备:b5ab3f4ab51707d5e17af5dc5764c732&#34;&gt;安装前准备&lt;/h2&gt;

&lt;p&gt;Linux下面自然不用多说，Windows下面要注意几个问题&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;删除Mercurial提供的exe或者mis安装过的独立版本&lt;/li&gt;
&lt;li&gt;安装有Mingw，当然你用msvc的话下面的就可以省略了，
不过我还没有尝试过&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设置Python Disutils的默认编译器为Gcc
进入 &lt;code&gt;PYTHON_HOME/Lib/distutils&lt;/code&gt; 建立新文件 &lt;code&gt;distutils.cfg&lt;/code&gt; 。
输入以下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[build]
compiler=mingw32
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安装:b5ab3f4ab51707d5e17af5dc5764c732&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;安装就简单了，使用 &lt;code&gt;easy_install&lt;/code&gt; 或者 &lt;code&gt;pip&lt;/code&gt; 直接&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install mercurial
pip install hg-git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后配置hg加载hggit扩展，在用户目录下的 &lt;code&gt;.hgrc&lt;/code&gt; 文件中加入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[extensions]
bookmarks =
hggit =
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后输入 &lt;code&gt;hg help&lt;/code&gt; 就能看看到hggit已加载的输出&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enabled extensions:

hggit         push and pull from a Git server
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使用:b5ab3f4ab51707d5e17af5dc5764c732&#34;&gt;使用&lt;/h2&gt;

&lt;p&gt;使用的时候就是普遍的hg的命令了，这是相当happy的。
要注意的是git路径到hggit的转换，比如github中ssh方式访问
&lt;code&gt;git@github.com:username/reposname.git&lt;/code&gt; 要换成
&lt;code&gt;git+ssh://git@github.com:username/reposname.git&lt;/code&gt; 就可以了&lt;/p&gt;

&lt;p&gt;还有一个推送已有hg库到git库的方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd hg-git # (a Mercurial repository)
$ hg bookmark -r default master # make a bookmark of master for default, so a ref gets created
$ hg push git+ssh://git@github.com/schacon/hg-git.git
$ hg push
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;enjoy-you-git-now:b5ab3f4ab51707d5e17af5dc5764c732&#34;&gt;Enjoy you Git Now!&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Embed ChickenScheme In Go</title>
      <link>http://archs.github.io/post/goschicken/</link>
      <pubDate>Wed, 10 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://archs.github.io/post/goschicken/</guid>
      <description>&lt;p&gt;使用cgo加载c库的主要麻烦在于cgo不识别c头文件中的宏
而chicken scheme初始化的时候要调用一个全局函数CHICKEN_default_toplevel。
在cgo中使用 &lt;code&gt;void* dfp = CHICKEN_default_toplevel;&lt;/code&gt; 可以直接声明。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

/*
#cgo windows CFLAGS: -D_GUN_SOURCE -I&amp;quot;c:/my-chicken/include/chicken&amp;quot; -DHAVE_CHICKEN_CONFIG_H -DC_ENABLE_PTABLES
#cgo windows LDFLAGS: -L&amp;quot;c:/my-chicken/lib&amp;quot; -lchicken -lm

#include &amp;lt;chicken.h&amp;gt;

void* dfp = CHICKEN_default_toplevel;
*/
import &amp;quot;C&amp;quot;
import (
    &amp;quot;unsafe&amp;quot;
)

func main() {
    src := &amp;quot;(+ 1 2 3)&amp;quot;
    nSrc := 10
    ret := make([]byte, nSrc)
    p := (*C.char)(unsafe.Pointer(&amp;amp;ret[0]))
    C.CHICKEN_run(C.dfp)
    C.CHICKEN_eval_string_to_string(C.CString(src), p, C.int(nSrc))
    println(string(ret))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最近才发现，cgo不仅可以识别注释中的c语句，对于相同目录下面的*.c文件也可
自动编译，呵呵，像sqlite之类的库就可以静态的形式直接使用了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用Markdown</title>
      <link>http://archs.github.io/post/aboutMarkDown/</link>
      <pubDate>Tue, 05 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://archs.github.io/post/aboutMarkDown/</guid>
      <description>

&lt;p&gt;感觉比rst简单许多，链接的使用也没有那么多的麻烦。
docutils是一个伟大的工具，但是有些 &lt;em&gt;繁琐&lt;/em&gt; 。细节的使用上
比如插入图片，虽然可以定制格式但是调整起来还是很麻烦的。&lt;/p&gt;

&lt;h1 id=&#34;简单的列表:d3e7e308df33aab0a4a2a0b1e938f271&#34;&gt;简单的列表&lt;/h1&gt;

&lt;p&gt;关键是列表啊，md的列表很比rst好用一些&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;这是itme1&lt;/p&gt;

&lt;p&gt;可插入一个段落，作为itme1的一个子段落，
这在rst中让我遇到很多麻烦&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Item2&lt;/p&gt;

&lt;p&gt;rst中的ordered list不能够被自段落分开，否则编号不连续
最后使用的还是手写编号的形式，就跟md一样了&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;方便的标题:d3e7e308df33aab0a4a2a0b1e938f271&#34;&gt;方便的标题&lt;/h1&gt;

&lt;p&gt;标题要简洁一些，而且没有要求下划线至少要不标题长，少了一些约束。&lt;/p&gt;

&lt;h1 id=&#34;代码插入:d3e7e308df33aab0a4a2a0b1e938f271&#34;&gt;代码插入&lt;/h1&gt;

&lt;p&gt;来段代码吧 :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// New in version 2.6.
func PyErr_WarnPy3k(message string, stacklevel int) error {
    c_message := C.CString(message)
    defer C.free(unsafe.Pointer(c_message))

    return int2err(C._gopy_PyErr_WarnPy3k(c_message, C.int(stacklevel)))
}

// int PyErr_CheckSignals()
// This function interacts with Python’s signal handling. It checks whether a signal has been sent to the processes and if so, invokes the corresponding signal handler. If the signal module is supported, this can invoke a signal handler written in Python. In all cases, the default effect for SIGINT is to raise the KeyboardInterrupt exception. If an exception is raised the error indicator is set and the function returns -1; otherwise the function returns 0. The error indicator may or may not be cleared if it was previously set.
func PyErr_CheckSignals() bool {
    return int2bool(C.PyErr_CheckSignals())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;markdown跟HTML的紧密结合，使网页的手动写作方便了许多。虽然在多种到处格式上比
rst还是有些差距，但是用的机会毕竟不多。&lt;/p&gt;

&lt;p&gt;想看教程的猛击这里&lt;a href=&#34;http://wowubuntu.com/markdown/&#34;&gt;Markdown中文版语法说明&lt;/a&gt; :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>