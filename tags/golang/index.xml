<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Archs</title>
    <link>http://archs.github.io/tags/golang/</link>
    <description>Recent content in Golang on Archs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>archs@archs.tk (Archs)</managingEditor>
    <webMaster>archs@archs.tk (Archs)</webMaster>
    <lastBuildDate>Thu, 11 Jun 2015 16:51:59 +0800</lastBuildDate>
    <atom:link href="http://archs.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Canvas Particles Using Gopherjs</title>
      <link>http://archs.github.io/gopherjs/canvasparticls/</link>
      <pubDate>Thu, 11 Jun 2015 16:51:59 +0800</pubDate>
      <author>archs@archs.tk (Archs)</author>
      <guid>http://archs.github.io/gopherjs/canvasparticls/</guid>
      <description>&lt;p&gt;使用 &lt;em&gt;Gopherjs&lt;/em&gt; 模拟的简单粒子系统，例子的来源是 &lt;a href=&#34;http://soulwire.github.io/sketch.js/examples/particles.html&#34;&gt;sketch.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;在不熟悉Javascript的情况下使用Gopherjs写HTML5应用，还是很有爽的！大部分的Golang绝大部分
基本库（除了os和syscall的部分功能）在Gopherjs中是直接可用的，见&lt;a href=&#34;https://github.com/gopherjs/gopherjs/blob/master/doc/packages.md&#34;&gt;兼容性列表&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Golang&lt;/code&gt;的类型系统比&lt;code&gt;Javascript&lt;/code&gt;直观的多，而且代码结构也要清爽许多。 :)&lt;/p&gt;

&lt;p&gt;但是也有些需要注意的问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Javascript&lt;/code&gt;是弱类型的，所以和&lt;code&gt;JS&lt;/code&gt;交互的时候，数字类型需要注意&lt;/li&gt;

&lt;li&gt;&lt;p&gt;interface目前在&lt;code&gt;Gopherjs&lt;/code&gt;与&lt;code&gt;JS&lt;/code&gt;的交互中支持的不是很好&lt;/p&gt;

&lt;p&gt;如果interface类型在&lt;code&gt;JS&lt;/code&gt;（一般来讲是js的各种库）和&lt;code&gt;Gopherjs&lt;/code&gt;之间传递，结果往往出于预料之外。
但是在不和&lt;code&gt;JS&lt;/code&gt;交互的代码中使用是没有问题的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Gopherjs&lt;/code&gt;生成的代码尺寸比较大&lt;/p&gt;

&lt;p&gt;如果对js文件的大小没什么严苛的需求，做做Demo和演示，在Web中使用 &lt;em&gt;Gopherjs&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main

import (
    &amp;quot;github.com/Archs/js/canvas&amp;quot;
    &amp;quot;github.com/Archs/js/dom&amp;quot;
    &amp;quot;github.com/Archs/js/raf&amp;quot;
    &amp;quot;math&amp;quot;
    &amp;quot;math/rand&amp;quot;
    &amp;quot;strconv&amp;quot;
)

const (
    MAX_PARTICLES = 280
)

var (
    COLOURS = []string{&amp;quot;#69D2E7&amp;quot;, &amp;quot;#A7DBD8&amp;quot;, &amp;quot;#E0E4CC&amp;quot;, &amp;quot;#F38630&amp;quot;, &amp;quot;#FA6900&amp;quot;, &amp;quot;#FF4E50&amp;quot;, &amp;quot;#F9D423&amp;quot;}
    ctx     *canvas.Context2D
    cw, ch  float64
    counter = 0
    ps      = []*Particle{}
    pool    = []*Particle{}
)

type Particle struct {
    *canvas.Context2D
    x, y    float64
    vx, vy  float64
    radius  float64
    theta   float64
    force   float64
    damping float64
    color   string
}

func getParticle(x, y float64) *Particle {
    var p *Particle
    if len(ps) &amp;gt;= MAX_PARTICLES {
        pool = append(pool, ps[0])
        ps = ps[1:]
    }
    if len(pool) &amp;gt; 0 {
        p = pool[0]
        pool = pool[1:]
    } else {
        p = &amp;amp;Particle{
            Context2D: ctx,
        }
    }
    p.init(x, y)
    return p
}

func (p *Particle) init(x, y float64) {
    p.x = x
    p.y = y
    p.radius = 5 + 35*rand.Float64()
    p.theta = 2 * math.Pi * rand.Float64()
    p.force = 2 + 8*rand.Float64()
    p.damping = 0.9 + 0.1*rand.Float64()
    p.color = COLOURS[rand.Intn(7)]
    p.vx = p.force * math.Sin(p.theta)
    p.vy = p.force * math.Cos(p.theta)
}

func (p *Particle) isAlive() bool {
    return p.radius &amp;gt; 0.5
}

func (g *Particle) update() {
    // update
    g.radius *= 0.93
    g.x += g.vx
    g.y += g.vy
    // g.theta += (0.5 - rand.Float64()) * 0.15
    g.vx *= g.damping
    g.vy *= g.damping
    g.vx += (math.Sin(g.theta) * 0.1)
    g.vy += (math.Cos(g.theta) * 0.1)
    // g.vx += (rand.Float64() * 0.1)
    // g.vy += (rand.Float64() * 0.1)
}

func (g *Particle) draw(t float64) {
    // for canvas
    g.BeginPath()
    g.Arc(g.x, g.y, g.radius, 0, math.Pi*2, true)
    g.FillStyle = g.color
    g.Fill()
}

func run(t float64) {
    raf.RequestAnimationFrame(run)
    counter += 1
    // frame control
    if counter%2 == 0 {
        return
    }
    // update &amp;amp; draw all the particles
    ctx.ClearRect(0, 0, cw, ch)
    for i := len(ps) - 1; i &amp;gt;= 0; i-- {
        p := ps[i]
        p.update()
        if !p.isAlive() {
            ps = append(ps[:i], ps[i+1:]...)
        } else {
            p.draw(t)
        }
    }
}

func makeParticles(x, y float64, n int) {
    for i := 0; i &amp;lt; rand.Intn(n); i++ {
        p := getParticle(x, y)
        ps = append(ps, p)
    }
}

func main() {
    dom.OnDOMContentLoaded(func() {
        s := dom.GetElementById(&amp;quot;gopherjs&amp;quot;)
        style := dom.GetComputedStyle(s)

        el := canvas.New(dom.CreateElement(&amp;quot;canvas&amp;quot;).Object)
        cw, _ = strconv.ParseFloat(style.GetPropertyValue(&amp;quot;width&amp;quot;)[:3], 64)
        ch, _ = strconv.ParseFloat(style.GetPropertyValue(&amp;quot;height&amp;quot;)[:3], 64)
        el.Width = int(cw)
        el.Height = int(ch)
        el.AddEventListener(dom.EvtMousemove, func(e *dom.Event) {
            e.PreventDefault()
            x := float64(e.LayerX)
            y := float64(e.LayerY)
            makeParticles(x, y, 5)
        })
        ctx = el.GetContext2D()
        ctx.GlobalCompositeOperation = canvas.CompositeLighter
        s.AppendChild(el.Element)
        raf.RequestAnimationFrame(run)
    })
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>