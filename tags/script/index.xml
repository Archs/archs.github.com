<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Script on Archs</title>
    <link>http://archs.github.io/tags/script/</link>
    <description>Recent content in Script on Archs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>archs@archs.tk (Archs)</managingEditor>
    <webMaster>archs@archs.tk (Archs)</webMaster>
    <lastBuildDate>Mon, 15 Jul 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://archs.github.io/tags/script/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lua画图软件</title>
      <link>http://archs.github.io/blog/lua.graph/</link>
      <pubDate>Mon, 15 Jul 2013 00:00:00 +0000</pubDate>
      <author>archs@archs.tk (Archs)</author>
      <guid>http://archs.github.io/blog/lua.graph/</guid>
      <description>&lt;p&gt;在网上看到一篇文章 &lt;a href=&#34;http://www.cnblogs.com/rufi/archive/2011/06/28/GraphPlot.html&#34;&gt;用Lua画二元方程&lt;/a&gt;，很有意思。 作者提供了源代码，很是佩服Lua的个功能强大和作者的奇思妙想。&lt;/p&gt;

&lt;p&gt;这里仅提供完整的代码封装一份,不依赖外部DLL，成为一个独立的Win32应用程序:
&lt;a href=&#34;http://archs.github.io/assets/media/graph.exe&#34;&gt;下载链接&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setmetatable(_G, { __index = math })
e = exp(1)

cfg=[[
Config={Width=400, Height=400, Xmin=-100, Xmax=100, Ymin=-100, Ymax=100, Split = 4, Expr=&amp;quot;abs(x - y) % 20 &amp;lt; 0.0001&amp;quot;}

function between(x, minValue, maxValue)
  return x &amp;gt;= minValue and x &amp;lt;= maxValue
end

function belongto(x, ranges)
 for _,range in ipairs(ranges) do
      if between(x, range[1], range[2]) then return true end
 end
 return false
end

Favorites={
branchname = &amp;quot;Favorites&amp;quot;,
{leafname = &amp;quot;axis&amp;quot;, tip = &amp;quot;x==0 or y==0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;rect&amp;quot;, tip = &amp;quot;abs(x+50)&amp;lt;10 and abs(y-20)&amp;lt;20&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;lines(V)&amp;quot;, tip = &amp;quot;x%15 == 0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;lines(H)&amp;quot;, tip = &amp;quot;y%15 == 0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;lines(S)&amp;quot;, tip = &amp;quot;(y-x)%20 == 0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;lines(S)&amp;quot;, tip = &amp;quot;(y+x)%20 == 0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;triangular&amp;quot;, tip = &amp;quot;y&amp;lt;x+50 and x*y&amp;lt;0 and y&amp;gt;0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;triangular&amp;quot;, tip = &amp;quot;(x&amp;gt;-20 and x&amp;lt;=0 and y&amp;lt;2*x+40 or x&amp;gt;=0 and x&amp;lt;20 and y&amp;lt;40-2*x) and y&amp;gt;0&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;disk&amp;quot;, tip = &amp;quot;x^2 + y^2 &amp;lt; 500&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;circle&amp;quot;, tip = &amp;quot;abs((x^2 + y^2)  - 1000) &amp;lt; 5&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;ellipse&amp;quot;, tip = &amp;quot;abs(((x/2)^2 + y^2)  - 1000) &amp;lt; 5&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;sun&amp;quot;, tip = &amp;quot;(x==0 or abs(atan(y/x)%0.2)&amp;lt;0.005) and between(x^2+y^2, 1600,4900) or x^2+y^2&amp;lt;900&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;face&amp;quot;, tip = &amp;quot;(x/2-25)^2+(y-50)^2&amp;lt;200 or (x/2+25)^2+(y-50)^2&amp;lt;200 or ((x&amp;gt;-20 and x&amp;lt;=0 and y&amp;lt;2*x+40 or x&amp;gt;=0 and x&amp;lt;20 and y&amp;lt;40-2*x) and y&amp;gt;0) or abs((x/2)^2+(y+30)^2-400)&amp;lt;10 or abs(y-(x/8)^2+80)&amp;lt;0.5&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;circles&amp;quot;, tip = &amp;quot;sqrt(x^2 + y^2) % 10 &amp;lt; 0.1&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;wave&amp;quot;, tip = &amp;quot;(x^2 + y^2) % 80 &amp;lt; 5&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;sin&amp;quot;, tip = &amp;quot;abs(y-20*sin(x/5)) &amp;lt; 0.1&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;chessboard&amp;quot;, tip = &amp;quot;sin(y/5)*cos(x/5) &amp;lt; 0.000001&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;cells&amp;quot;, tip = &amp;quot;sin(y/3) + sin(x/3) &amp;lt; 0.000001&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;texture&amp;quot;, tip = &amp;quot;sin((y/3)^2 + x/2) &amp;lt; 0.1&amp;quot;, config = {Xmin=-100, Xmax=100, Ymin=-100,Ymax=100,Split=4}},
{leafname = &amp;quot;texture&amp;quot;, tip = &amp;quot;sin(y^2)+cos(x^2) &amp;lt; 0.000001&amp;quot;, config = {Xmin=-8, Xmax=8, Ymin=-8,Ymax=8,Split=5}},
{leafname = &amp;quot;spots&amp;quot;, tip = &amp;quot;sin(x)^2+cos(y)^2 &amp;lt; 0.5&amp;quot;, config = {Xmin=-8, Xmax=8, Ymin=-8,Ymax=8,Split=5}},
{leafname = &amp;quot;Margarita&amp;quot;, tip = &amp;quot;mod(sqrt(x^2+y^2)-3.5*atan(x,y)+sin(x)+cos(y),pi)&amp;lt;pi/2&amp;quot;, config = {Xmin=-20, Xmax=20, Ymin=-20,Ymax=20,Split=8}},
{leafname = &amp;quot;pattern&amp;quot;, tip = &amp;quot;sin(x*sin(y)+y*sin(x)) &amp;lt; 0.001&amp;quot;, config = {Xmin=-12, Xmax=12, Ymin=-12,Ymax=12,Split=8}},
{leafname = &amp;quot;untitled&amp;quot;, tip = &amp;quot;abs(e^(sin(x)+cos(y))-sin(e^(x+y)))&amp;lt;0.01&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=15}},
{leafname = &amp;quot;untitled&amp;quot;, tip = &amp;quot;abs( sin(sin(x)+cos(y)) - cos(sin(x*y)+cos(x)) )&amp;lt;0.01&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=10}},
{leafname = &amp;quot;untitled&amp;quot;, tip = &amp;quot;abs( sin(x^2+y^2) - cos(x*y) )&amp;lt;0.01&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=10}},
{leafname = &amp;quot;mesh&amp;quot;, tip = &amp;quot;abs( sin(x^2-y^2) - cos(x*y) )&amp;lt;0.01&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=10}},
{leafname = &amp;quot;untitled&amp;quot;, tip = &amp;quot;abs( sin(x^sin(y)+y^cos(x))-cos(y^x+x^y))&amp;lt;0.005&amp;quot;, config = {Xmin=0, Xmax=20, Ymin=0,Ymax=20,Split=10}},
{leafname = &amp;quot;Frontispiece&amp;quot;, tip = &amp;quot;abs( x/sin(x)+y/sin(y) - x*y/sin(x*y) )&amp;lt;1&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=10}},
{leafname = &amp;quot;Threesome&amp;quot;, tip = &amp;quot;belongto(sin(sqrt((x+5)^2+y^2))*cos(8*atan(y/(x+5)))*sin(sqrt((x-5)^2+(y-5)^2))*cos(8*atan((y-5)/(x-5)))*sin(sqrt(x^2+(y+5)^2))*cos(8*atan((y+5)/x)), {{-0.1,0},{0.2,math.huge}})&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=10}},
{leafname = &amp;quot;TaiChi&amp;quot;, tip = &amp;quot;x^2+y^2&amp;lt;64 and x^2+(y-4)^2&amp;gt;16 and x^2+(y+4)^2&amp;gt;1 and x&amp;lt;=0 or between(x^2+(y+4)^2,1,16) or x^2+(y-4)^2&amp;lt;1 or abs(sqrt(x^2+y^2)-8)&amp;lt;0.005&amp;quot;, config = {Xmin=-10, Xmax=10, Ymin=-10,Ymax=10,Split=10}},
}
]]

-- Load Config and Favorites
-- dofile(&amp;quot;Favorites.lua&amp;quot;)
-- make sure to load the &amp;quot;config files&amp;quot;
require(&amp;quot;io&amp;quot;)
ferr = io.open(&amp;quot;Favorites.lua&amp;quot;)
if not ferr then
  assert(loadstring(cfg))()
else
  dofile(&amp;quot;Favorites.lua&amp;quot;)
  io.close(ferr)
end
pixels = {}
for r=1,Config.Height do
 pixels[r] = {}
 for c=1,Config.Width do
       pixels[r][c] = false
 end
end

cnv = iup.canvas{ rastersize=string.format(&amp;quot;%dx%d&amp;quot;, Config.Width, Config.Height) }
treeFavorite = iup.tree{ size = &amp;quot;100x100&amp;quot;}

canvasColor = cd.EncodeColor(255,255,255)
penColor = cd.EncodeColor(0,0,0)

function selectColor(self)
 r,g,b = iup.GetColor(iup.CENTER,iup.CENTER)
self.bgcolor = string.format(&amp;quot;%d %d %d&amp;quot;,r,g,b)
if self.name == &amp;quot;btnPen&amp;quot; then penColor = cd.EncodeColor(r,g,b)
else canvasColor = cd.EncodeColor(r,g,b) end
end

dlg = iup.dialog
{
   title=&amp;quot;Plot graphs of equations and inequalities in two vairables&amp;quot;,
   resize=&amp;quot;NO&amp;quot;,
   minbox=&amp;quot;NO&amp;quot;,
   iup.hbox
   {
       iup.vbox
       {
          iup.frame
          {
              title = &amp;quot;Color&amp;quot;,
              iup.hbox
              {
                   iup.label{title = &amp;quot; Canvas: &amp;quot;},
                   iup.button{ name = &amp;quot;btnCanvas&amp;quot;, size = &amp;quot;22x10&amp;quot;, bgcolor=&amp;quot;255 255 255&amp;quot;, flat=&amp;quot;YES&amp;quot;, action = selectColor},
                   iup.label{title = &amp;quot; Pen: &amp;quot;},
                   iup.button{ name = &amp;quot;btnPen&amp;quot;, size = &amp;quot;22x10&amp;quot;, bgcolor=&amp;quot;0 0 0&amp;quot;, flat=&amp;quot;YES&amp;quot;, action = selectColor},
                   alignment = &amp;quot;ACENTER&amp;quot;
              }
          },
          iup.frame
          {
              title = &amp;quot;Range&amp;quot;,
              iup.vbox
              {
                   iup.hbox
                   {
                       iup.label{title = &amp;quot;X: &amp;quot;},
                       iup.text{ name = &amp;quot;txtXMin&amp;quot;, size = &amp;quot;38x10&amp;quot;, value = Config.Xmin},
                       iup.label{title = &amp;quot; ~ &amp;quot;},
                       iup.text{ name = &amp;quot;txtXMax&amp;quot;, size = &amp;quot;38x10&amp;quot;, value = Config.Xmax}
                   },
                   iup.hbox
                   {
                       iup.label{title = &amp;quot;Y: &amp;quot;},
                       iup.text{ name = &amp;quot;txtYMin&amp;quot;, size = &amp;quot;38x10&amp;quot;, value = Config.Ymin},
                       iup.label{title = &amp;quot; ~ &amp;quot;},
                       iup.text{ name = &amp;quot;txtYMax&amp;quot;, size = &amp;quot;38x10&amp;quot;, value = Config.Ymax}
                   }
              }
          },
          iup.hbox
          {
               iup.label{ title = &amp;quot;Pixel Split: &amp;quot; },
               iup.text{ name = &amp;quot;txtSplit&amp;quot;, value = Config.Split},
               alignment = &amp;quot;ACENTER&amp;quot;
          },
          treeFavorite,
          margin = &amp;quot;2x2&amp;quot;
       },
       iup.vbox
       {
           iup.hbox
           {
               iup.label{title = &amp;quot;Expression: &amp;quot;},
               iup.text{ name = &amp;quot;exprtext&amp;quot;, rastersize = (Config.Width-120)..&amp;quot;x22&amp;quot;, value = &amp;quot;abs(x - y) % 20 &amp;lt; 0.0001&amp;quot;},
               iup.button{title = &amp;quot;Plot&amp;quot;, size = &amp;quot;34x12&amp;quot;, action = function() plotExpression() end},
               alignment = &amp;quot;ACENTER&amp;quot;
           },
           cnv,
           margin = &amp;quot;2x2&amp;quot;
       }
   }
}

function getNumber(name)
   return tonumber(iup.GetDialogChild(dlg, name).value)
end

function setTextValue(name, value)
   iup.GetDialogChild(dlg, name).value = value
end

function plotExpression()
   local expr = iup.GetDialogChild(dlg, &amp;quot;exprtext&amp;quot;).value
   local func, err = loadstring(&amp;quot;return function (x,y) return &amp;quot;.. expr..&amp;quot; end&amp;quot;)
   if func==nil then iup.Message(&amp;quot;Error&amp;quot;, &amp;quot;Expression has syntax errors:\r\n&amp;quot;..err) return end
   equation = func()
   drawing = true
   iup.Redraw(cnv, 0)
end

function cnv:map_cb()
 canvas = cd.CreateCanvas(cd.IUP, self)
end

drawing = false
function cnv:action()
 canvas:Activate()
 canvas:Background(canvasColor)
 canvas:Clear()
 local width = Config.Width
 local height = Config.Height
 if drawing == false then
   for r=height,1,-1 do
     for c=1,width do
         if pixels[r][c] then
           canvas:Pixel(c, r, penColor)
         end
     end
   end
   return
 end

 dlg.active = &amp;quot;NO&amp;quot;
 local xMin = getNumber(&amp;quot;txtXMin&amp;quot;)
 local xMax = getNumber(&amp;quot;txtXMax&amp;quot;)
 local yMin = getNumber(&amp;quot;txtYMin&amp;quot;)
 local yMax = getNumber(&amp;quot;txtYMax&amp;quot;)
 local split = getNumber(&amp;quot;txtSplit&amp;quot;)
 local DX = (xMax - xMin)/width
 local DY = (yMax - yMin)/height
 local dx = DX / split
 local dy = DY / split
 local x = xMin
 local y = yMax
 for r=height,1,-1 do
     for c=1,width do
       local fill = isSolution(x,y,dx,dy,split)
       pixels[r][c] = fill
       if fill then
           canvas:Pixel(c, r, penColor)
       end
       x = x + DX
     end
     x = xMin
     y = y - DY
 end
 drawing = false
 dlg.active = &amp;quot;YES&amp;quot;
end

function isSolution(x0,y0,dx,dy,split)
   local x = x0
   local y = y0
   for i=1,split do
       for j=1,split do
           if equation(x, y) then return true end
           x = x + dx
       end
       x = x0
       y = y - dy
   end
   return false
end

function treeFavorite:selection_cb(id, status)
   if status == 1 then
       node = Favorites[id]
       setTextValue(&amp;quot;exprtext&amp;quot;, node.tip)
       if node.config ~= nil then
           setTextValue(&amp;quot;txtXMin&amp;quot;, node.config.Xmin)
           setTextValue(&amp;quot;txtXMax&amp;quot;, node.config.Xmax)
           setTextValue(&amp;quot;txtYMin&amp;quot;, node.config.Ymin)
           setTextValue(&amp;quot;txtYMax&amp;quot;, node.config.Ymax)
           setTextValue(&amp;quot;txtSplit&amp;quot;, node.config.Split)
       end
   end
end

function dlg:close_cb()
 canvas:Kill()
 self:destroy()
 return iup.IGNORE
end

dlg:show()
iup.TreeAddNodes(treeFavorite, Favorites)
iup.MainLoop()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>